@using Microsoft.AspNetCore.Components.Routing
@inject IJSRuntime JSRuntime

<CascadingValue Value="this">

    <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
    <MudDialogProvider />
    <MudSnackbarProvider />
    <MudPopoverProvider />

    <PageTransition />

    <Router AppAssembly="@typeof(App).Assembly">

        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>

        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <MudContainer Class="mt-6">
                    <MudText Typo="Typo.h4" Align="Align.Center" GutterBottom="true">Page not found</MudText>
                    <MudText Typo="Typo.body1" Align="Align.Center">
                        Sorry, there's nothing at this address.
                    </MudText>
                    <MudContainer Class="d-flex justify-center mt-4">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/">Go Home</MudButton>
                    </MudContainer>
                </MudContainer>
            </LayoutView>
        </NotFound>

    </Router>

</CascadingValue>

@code
{
    private bool _isDarkMode = true; // Set dark mode as default

    // Theme using Tailwind CSS colors
    private MudTheme _theme = new MudTheme()
    {
        Palette = new PaletteLight()
        {
            // Light mode using Tailwind CSS colors
            Primary = "#3B82F6",          // blue-500
            Secondary = "#8B5CF6",        // violet-500
            Tertiary = "#EC4899",         // pink-500
            Info = "#06B6D4",             // cyan-500
            Success = "#10B981",          // emerald-500
            Warning = "#F59E0B",          // amber-500
            Error = "#EF4444",            // red-500
            Dark = "#1E293B",             // slate-800
            
            // Background colors
            Background = "#F8FAFC",       // slate-50
            Surface = "#FFFFFF",          // white
            AppbarBackground = "#3B82F6", // blue-500
            DrawerBackground = "#FFFFFF", // white
            
            // Text colors
            TextPrimary = "#0F172A",      // slate-900
            TextSecondary = "#475569",    // slate-600
            DrawerText = "#475569",       // slate-600
            AppbarText = "#FFFFFF",       // white
        },
        PaletteDark = new PaletteDark()
        {
            // Dark mode using Tailwind CSS colors
            Primary = "#60A5FA",          // blue-400
            Secondary = "#A78BFA",        // violet-400
            Tertiary = "#F472B6",         // pink-400
            Info = "#22D3EE",             // cyan-400
            Success = "#34D399",          // emerald-400
            Warning = "#FBBF24",          // amber-400
            Error = "#F87171",            // red-400
            Dark = "#F8FAFC",             // slate-50
            
            // Background colors
            Background = "#0F172A",       // slate-900
            Surface = "#1E293B",          // slate-800
            AppbarBackground = "#0F172A", // slate-900
            DrawerBackground = "#0F172A", // slate-900
            
            // Text colors
            TextPrimary = "#F8FAFC",      // slate-50
            TextSecondary = "#CBD5E1",    // slate-300
            DrawerText = "#CBD5E1",       // slate-300
            AppbarText = "#F8FAFC",       // slate-50
        },
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { "Inter", "ui-sans-serif", "system-ui", "sans-serif" }
            }
        }
    };

    protected override async Task OnInitializedAsync()
    {
        // Load theme preference from localStorage
        var storedTheme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "portfolioTheme");
        if (!string.IsNullOrEmpty(storedTheme))
        {
            _isDarkMode = storedTheme == "dark";
        }
    }

    public async void ToggleTheme()
    {
        _isDarkMode = !_isDarkMode;
        // Save theme preference to localStorage
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "portfolioTheme", _isDarkMode ? "dark" : "light");
        StateHasChanged();
    }
}
